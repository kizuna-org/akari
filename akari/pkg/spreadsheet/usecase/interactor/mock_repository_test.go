// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/spreadsheet/domain/service/spreadsheet.go
//
// Generated by this command:
//
//	mockgen -source=pkg/spreadsheet/domain/service/spreadsheet.go -destination=pkg/spreadsheet/usecase/interactor/mock_repository_test.go -package=interactor_test SpreadsheetRepository
//

// Package interactor_test is a generated GoMock package.
package interactor_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/kizuna-org/akari/pkg/spreadsheet/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSpreadsheetRepository is a mock of SpreadsheetRepository interface.
type MockSpreadsheetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpreadsheetRepositoryMockRecorder
	isgomock struct{}
}

// MockSpreadsheetRepositoryMockRecorder is the mock recorder for MockSpreadsheetRepository.
type MockSpreadsheetRepositoryMockRecorder struct {
	mock *MockSpreadsheetRepository
}

// NewMockSpreadsheetRepository creates a new mock instance.
func NewMockSpreadsheetRepository(ctrl *gomock.Controller) *MockSpreadsheetRepository {
	mock := &MockSpreadsheetRepository{ctrl: ctrl}
	mock.recorder = &MockSpreadsheetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpreadsheetRepository) EXPECT() *MockSpreadsheetRepositoryMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockSpreadsheetRepository) Append(ctx context.Context, gridData *entity.GridData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, gridData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockSpreadsheetRepositoryMockRecorder) Append(ctx, gridData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Append), ctx, gridData)
}

// Clear mocks base method.
func (m *MockSpreadsheetRepository) Clear(ctx context.Context, cellRange entity.CellRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, cellRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSpreadsheetRepositoryMockRecorder) Clear(ctx, cellRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Clear), ctx, cellRange)
}

// Create mocks base method.
func (m *MockSpreadsheetRepository) Create(ctx context.Context, gridData *entity.GridData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, gridData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSpreadsheetRepositoryMockRecorder) Create(ctx, gridData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Create), ctx, gridData)
}

// Delete mocks base method.
func (m *MockSpreadsheetRepository) Delete(ctx context.Context, cellRange entity.CellRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cellRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpreadsheetRepositoryMockRecorder) Delete(ctx, cellRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Delete), ctx, cellRange)
}

// Read mocks base method.
func (m *MockSpreadsheetRepository) Read(ctx context.Context, cellRange entity.CellRange) (*entity.GridData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, cellRange)
	ret0, _ := ret[0].(*entity.GridData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSpreadsheetRepositoryMockRecorder) Read(ctx, cellRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Read), ctx, cellRange)
}

// Update mocks base method.
func (m *MockSpreadsheetRepository) Update(ctx context.Context, gridData *entity.GridData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, gridData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpreadsheetRepositoryMockRecorder) Update(ctx, gridData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpreadsheetRepository)(nil).Update), ctx, gridData)
}

// MockSpreadsheetService is a mock of SpreadsheetService interface.
type MockSpreadsheetService struct {
	ctrl     *gomock.Controller
	recorder *MockSpreadsheetServiceMockRecorder
	isgomock struct{}
}

// MockSpreadsheetServiceMockRecorder is the mock recorder for MockSpreadsheetService.
type MockSpreadsheetServiceMockRecorder struct {
	mock *MockSpreadsheetService
}

// NewMockSpreadsheetService creates a new mock instance.
func NewMockSpreadsheetService(ctrl *gomock.Controller) *MockSpreadsheetService {
	mock := &MockSpreadsheetService{ctrl: ctrl}
	mock.recorder = &MockSpreadsheetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpreadsheetService) EXPECT() *MockSpreadsheetServiceMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockSpreadsheetService) Append(ctx context.Context, spreadsheetId, sheetName, range_ string, values [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, spreadsheetId, sheetName, range_, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockSpreadsheetServiceMockRecorder) Append(ctx, spreadsheetId, sheetName, range_, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockSpreadsheetService)(nil).Append), ctx, spreadsheetId, sheetName, range_, values)
}

// Clear mocks base method.
func (m *MockSpreadsheetService) Clear(ctx context.Context, spreadsheetId, sheetName, range_ string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, spreadsheetId, sheetName, range_)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSpreadsheetServiceMockRecorder) Clear(ctx, spreadsheetId, sheetName, range_ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSpreadsheetService)(nil).Clear), ctx, spreadsheetId, sheetName, range_)
}

// Create mocks base method.
func (m *MockSpreadsheetService) Create(ctx context.Context, spreadsheetId, sheetName, range_ string, values [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, spreadsheetId, sheetName, range_, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSpreadsheetServiceMockRecorder) Create(ctx, spreadsheetId, sheetName, range_, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpreadsheetService)(nil).Create), ctx, spreadsheetId, sheetName, range_, values)
}

// Delete mocks base method.
func (m *MockSpreadsheetService) Delete(ctx context.Context, spreadsheetId, sheetName, range_ string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, spreadsheetId, sheetName, range_)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpreadsheetServiceMockRecorder) Delete(ctx, spreadsheetId, sheetName, range_ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpreadsheetService)(nil).Delete), ctx, spreadsheetId, sheetName, range_)
}

// Read mocks base method.
func (m *MockSpreadsheetService) Read(ctx context.Context, spreadsheetId, sheetName, range_ string) (*entity.GridData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, spreadsheetId, sheetName, range_)
	ret0, _ := ret[0].(*entity.GridData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSpreadsheetServiceMockRecorder) Read(ctx, spreadsheetId, sheetName, range_ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSpreadsheetService)(nil).Read), ctx, spreadsheetId, sheetName, range_)
}

// Update mocks base method.
func (m *MockSpreadsheetService) Update(ctx context.Context, spreadsheetId, sheetName, range_ string, values [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, spreadsheetId, sheetName, range_, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpreadsheetServiceMockRecorder) Update(ctx, spreadsheetId, sheetName, range_, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpreadsheetService)(nil).Update), ctx, spreadsheetId, sheetName, range_, values)
}
